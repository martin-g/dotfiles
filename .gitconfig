[user]
  #	name = Martin Tzvetanov Grigorov (Apache Wicket)
	name = Martin Tzvetanov Grigorov
	email = mgrigorov@apache.org
	signingkey = 5F504C16
[alias]
	pull = pull --rebase
	cherry-pick = cherry-pick -x 
	st = status --short --branch
	ci = commit -v
	co = checkout
	br = branch
	w = whatchanged
	undo = "checkout --"
	l = log --oneline --decorate --graph
	ll = log --pretty=medium --decorate --graph --stat
	hist = log --pretty=format:\"%C(yellow bold)%h%Creset %C(red)%ad%Creset | %s%C(green bold)%d%Creset %C(blue)[%an]%Creset\" --graph --date=short
	fixup = commit --amend -c HEAD
	timeline = log --graph --branches --pretty=oneline --decorate
	untracked-files = ls-files -o --exclude-standard
	ignored-files = ls-files --others -i --exclude-standard
	modified-files = ls-files -m
	unstage = reset HEAD
	bl = blame -C
	new = ls-files --others --exclude-standard
	today = log --since=midnight --author=Martin --oneline
	me = log --author='Martin Grigorov' --oneline --all --date=iso --format='%Cred%h%Creset %Cgreen%ad%Creset %Cblue%an%Creset %C(auto)%s%Creset'
	newauthor = commit --amend --reset-author -C HEAD
	# add all changed (but not new) files to stage (index):
	au = add -u
	# prune all tracking local branches that have been removed from remote:
	prune-all = !git remote | xargs -n 1 git remote prune
	# show list of contributors in descending order by number of commits
	rank = shortlog -sn --no-merges
	# given a string for an author, try to figure out full name and email:
	whois = "!sh -c 'git log -i -1 --pretty=\"format:%an <%ae>\n\" --author=\"$1\"' -"
	# given any git object, try to show it briefly
	whatis = show -s --pretty='tformat:%h (%s, %ad)' --date=short
	# Search for a given string in all patches and print commit messages
	# example: search for any commit that adds or removes string "foobar"
	#     git searchcommits foobar
	# example: search commits for string "foobar" in directory src/lib
	#     git searchcommits foobar src/lib
	# example: search commits for "foobar", print full diff of commit with 1 line context
	#     git searchcommits foobar --pickaxe-all -U1 src/lib
	searchcommits = "!f() { query=\"$1\"; shift; git log -S\"$query\" \"$@\"; }; f \"$@\""
	pom = push origin master
	out = log -p origin..@{0}
	up = pull --rebase
	lg = log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit
	latest = for-each-ref --sort=-committerdate --format='%(committerdate:relative) %(refname:short)'
	todo = grep --heading --break --ignore-case -e ' FIX: *' -e ' TODO: *'\n
	addNotIgnored = ls-files --other --exclude-standard | xargs git add
	incoming = "!git remote update -p; git log ..@{u}"
	outgoing = log @{u}..
	gh = "!google-chrome https://github.$(git config remote.origin.url | cut -f2 -d. | tr ':' /)"
	pr = "!f() { git fetch github refs/pull/$1/head:pr/$1; } ; f"
[color]
	branch = auto
	diff = auto
	interactive = auto
	status = auto
	ui = auto
	pager = true
[color "branch"]
	current = yellow reverse
	local = yellow
	remote = green

[color "diff"]
	meta = yellow bold
	frag = magenta bold
	old = red bold
	new = green bold

[color "status"]
	added = yellow
	changed = green
	untracked = cyan
[core]
	editor = vim
	excludesfile = /home/martin/.gitignore
	whitespace=fix,-indent-with-non-tab,trailing-space,cr-at-eol
	autocrlf = input
	safecrlf = true

[pager]
	status = true
	show-branch = true
[format]
	numbered = auto
[apply]
	whitespace = fix
[github]
	user = martin-g
[push]
  # 'git push' will push the current branch to its tracking branch
  # the usual default is to push all branches
	# default = upstream
	default = simple
[help]
	autocorrect = 1
[diff]
	renames = copies

	# Git diff will use (i)ndex, (w)ork tree, (c)ommit and (o)bject
	# instead of a/b/c/d as prefixes for patches
	mnemonicprefix = true

[credential]
	helper = cache --timeout 86400
[rerere]
	enabled = true
